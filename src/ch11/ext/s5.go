package ext

import "fmt"

// 函数间传递切片

func MainSlice5() {
	s := []int{0, 1, 2, 3, 4, 5}
	fmt.Printf("%p\n", &s)
	modify(s)
	fmt.Println(s)
}
func modify(s []int) {
	fmt.Printf("%p\n", &s)
	s[1] = 10
}

// 总结&分析
//切片在函数间以值的方式传递。由于切片的尺寸很小（在 64 位架构的机器上，一个切片需要 24 字节的内存：指针字段、长度和容量字段各需要 8 字节），在函数间复制和传递切片成本也很低。切片发生复制时，底层数组不会被复制，数组大小也不会有影响。
// 执行结果
// 0xc00008e020
// 0xc00008e040
// [0 10 2 3 4 5]

//原切片地址和传递之后的切片的地址是不一样的，说明发生了复制；在函数modify中修改了切片一个值，原切片的值也随之改变了，说明这两个切片是共享底层数组的。

// 高效
//在函数间传递切片非常高效，而且不需要传递指针和处理复杂的语法，只需要复制切片，按自己的业务修改数据，最后传递回一个新的切片副本即可，这也是为什么函数间使用切片传参，而不是数组传参的原因。
