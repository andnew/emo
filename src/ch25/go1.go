package ch25

// 在学习 Mutex 之前，我们需要理解并发编程中临界区(Critical Selection)的概念。
// 当程序并发地运行时，多个 Go协程 不应该同时访问那些修改共享资源的代码。
// 这些修改共享资源的代码称为 临界区。
// 例如 一段代码，将一个变量 x 自增 1
//  x = x + 1

